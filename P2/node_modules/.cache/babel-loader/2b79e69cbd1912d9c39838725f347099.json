{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { Clock } from './Clock';\nimport { pipe } from '../internals/utils/utils';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport { PickersArrowSwitcher } from '../internals/components/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { getClockPickerUtilityClass } from './clockPickerClasses';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getClockPickerUtilityClass, classes);\n};\n\nconst ClockPickerRoot = styled(PickerViewRoot, {\n  name: 'MuiClockPicker',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'flex',\n  flexDirection: 'column'\n});\nconst ClockPickerArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiClockPicker',\n  slot: 'ArrowSwitcher',\n  overridesResolver: (props, styles) => styles.arrowSwitcher\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\n\nconst defaultGetClockLabelText = (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`;\n\nconst defaultGetMinutesClockNumberText = minutes => `${minutes} minutes`;\n\nconst defaultGetHoursClockNumberText = hours => `${hours} hours`;\n\nconst defaultGetSecondsClockNumberText = seconds => `${seconds} seconds`;\n/**\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/api/clock-picker/)\n */\n\n\nexport const ClockPicker = /*#__PURE__*/React.forwardRef(function ClockPicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiClockPicker'\n  });\n  const {\n    ampm = false,\n    ampmInClock = false,\n    autoFocus,\n    components,\n    componentsProps,\n    date,\n    disableIgnoringDatePartForTimeValidation = false,\n    getClockLabelText = defaultGetClockLabelText,\n    getHoursClockNumberText = defaultGetHoursClockNumberText,\n    getMinutesClockNumberText = defaultGetMinutesClockNumberText,\n    getSecondsClockNumberText = defaultGetSecondsClockNumberText,\n    leftArrowButtonText = 'open previous view',\n    maxTime,\n    minTime,\n    minutesStep = 1,\n    rightArrowButtonText = 'open next view',\n    shouldDisableTime,\n    showViewSwitcher,\n    onChange,\n    view,\n    views = ['hours', 'minutes'],\n    openTo,\n    onViewChange,\n    className\n  } = props;\n  const {\n    openView,\n    setOpenView,\n    nextView,\n    previousView,\n    handleChangeAndOpenNext\n  } = useViews({\n    view,\n    views,\n    openTo,\n    onViewChange,\n    onChange\n  });\n  const now = useNow();\n  const utils = useUtils();\n  const midnight = utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0);\n  const dateOrMidnight = date || midnight;\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(dateOrMidnight, ampm, handleChangeAndOpenNext);\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    if (date === null) {\n      return false;\n    }\n\n    const validateTimeValue = getRequestedTimePoint => {\n      const isAfterComparingFn = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n      return Boolean(minTime && isAfterComparingFn(minTime, getRequestedTimePoint('end')) || maxTime && isAfterComparingFn(getRequestedTimePoint('start'), maxTime) || shouldDisableTime && shouldDisableTime(rawValue, viewType));\n    };\n\n    switch (viewType) {\n      case 'hours':\n        {\n          const hoursWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          return validateTimeValue(when => pipe(currentDate => utils.setHours(currentDate, hoursWithMeridiem), dateWithHours => utils.setMinutes(dateWithHours, when === 'start' ? 0 : 59), dateWithMinutes => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59))(date));\n        }\n\n      case 'minutes':\n        return validateTimeValue(when => pipe(currentDate => utils.setMinutes(currentDate, rawValue), dateWithMinutes => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59))(date));\n\n      case 'seconds':\n        return validateTimeValue(() => utils.setSeconds(date, rawValue));\n\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, date, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, shouldDisableTime, utils]);\n  const selectedId = useId();\n  const viewProps = React.useMemo(() => {\n    switch (openView) {\n      case 'hours':\n        {\n          const handleHoursChange = (value, isFinish) => {\n            const valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);\n            handleChangeAndOpenNext(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);\n          };\n\n          return {\n            onChange: handleHoursChange,\n            value: utils.getHours(dateOrMidnight),\n            children: getHourNumbers({\n              date,\n              utils,\n              ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: getHoursClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'hours'),\n              selectedId\n            })\n          };\n        }\n\n      case 'minutes':\n        {\n          const minutesValue = utils.getMinutes(dateOrMidnight);\n\n          const handleMinutesChange = (value, isFinish) => {\n            handleChangeAndOpenNext(utils.setMinutes(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: getMinutesClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'minutes'),\n              selectedId\n            })\n          };\n        }\n\n      case 'seconds':\n        {\n          const secondsValue = utils.getSeconds(dateOrMidnight);\n\n          const handleSecondsChange = (value, isFinish) => {\n            handleChangeAndOpenNext(utils.setSeconds(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: getSecondsClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'seconds'),\n              selectedId\n            })\n          };\n        }\n\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [openView, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, handleChangeAndOpenNext, dateOrMidnight, isTimeDisabled, selectedId]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(ClockPickerRoot, {\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: [showViewSwitcher && /*#__PURE__*/_jsx(ClockPickerArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      leftArrowButtonText: leftArrowButtonText,\n      rightArrowButtonText: rightArrowButtonText,\n      components: components,\n      componentsProps: componentsProps,\n      onLeftClick: () => setOpenView(previousView),\n      onRightClick: () => setOpenView(nextView),\n      isLeftDisabled: !previousView,\n      isRightDisabled: !nextView,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus,\n      date: date,\n      ampmInClock: ampmInClock,\n      type: openView,\n      ampm: ampm,\n      getClockLabelText: getClockLabelText,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId\n    }, viewProps))]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ClockPicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * Set to `true` if focus should be moved to clock picker.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Selected date @DateIOType.\n   */\n  date: PropTypes.any,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for hours.\n   * @param {string} hours The hours to format.\n   * @returns {string} the formatted hours text.\n   * @default (hours: string) => `${hours} hours`\n   */\n  getHoursClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for minutes.\n   * @param {string} minutes The minutes to format.\n   * @returns {string} the formatted minutes text.\n   * @default (minutes: string) => `${minutes} minutes`\n   */\n  getMinutesClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for seconds.\n   * @param {string} seconds The seconds to format.\n   * @returns {string} the formatted seconds text.\n   * @default (seconds: string) => `${seconds} seconds`\n   */\n  getSecondsClockNumberText: PropTypes.func,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @default 'open previous view'\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * On change callback @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Initially open view.\n   * @default 'hours'\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Right arrow icon aria-label text.\n   * @default 'open next view'\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n  showViewSwitcher: PropTypes.bool,\n\n  /**\n   * Controlled open view.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Views for calendar picker.\n   * @default ['hours', 'minutes']\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":{"version":3,"sources":["/cs/home/wl39/Documents/CS3101/P2/node_modules/@mui/x-date-pickers/ClockPicker/ClockPicker.js"],"names":["_extends","React","clsx","PropTypes","unstable_useId","useId","styled","useThemeProps","unstable_composeClasses","composeClasses","Clock","pipe","useUtils","useNow","getHourNumbers","getMinutesNumbers","PickersArrowSwitcher","convertValueToMeridiem","createIsAfterIgnoreDatePart","useViews","useMeridiemMode","getClockPickerUtilityClass","PickerViewRoot","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","slots","root","arrowSwitcher","ClockPickerRoot","name","slot","overridesResolver","props","styles","display","flexDirection","ClockPickerArrowSwitcher","position","right","top","defaultGetClockLabelText","view","time","adapter","format","defaultGetMinutesClockNumberText","minutes","defaultGetHoursClockNumberText","hours","defaultGetSecondsClockNumberText","seconds","ClockPicker","forwardRef","inProps","ref","ampm","ampmInClock","autoFocus","components","componentsProps","date","disableIgnoringDatePartForTimeValidation","getClockLabelText","getHoursClockNumberText","getMinutesClockNumberText","getSecondsClockNumberText","leftArrowButtonText","maxTime","minTime","minutesStep","rightArrowButtonText","shouldDisableTime","showViewSwitcher","onChange","views","openTo","onViewChange","className","openView","setOpenView","nextView","previousView","handleChangeAndOpenNext","now","utils","midnight","setSeconds","setMinutes","setHours","dateOrMidnight","meridiemMode","handleMeridiemChange","isTimeDisabled","useCallback","rawValue","viewType","validateTimeValue","getRequestedTimePoint","isAfterComparingFn","Boolean","hoursWithMeridiem","when","currentDate","dateWithHours","dateWithMinutes","Error","selectedId","viewProps","useMemo","handleHoursChange","value","isFinish","valueWithMeridiem","getHours","children","getClockNumberText","isDisabled","minutesValue","getMinutes","handleMinutesChange","secondsValue","getSeconds","handleSecondsChange","onLeftClick","onRightClick","isLeftDisabled","isRightDisabled","type","process","env","NODE_ENV","propTypes","bool","object","string","any","func","number","isRequired","oneOf","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { Clock } from './Clock';\nimport { pipe } from '../internals/utils/utils';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nimport { getHourNumbers, getMinutesNumbers } from './ClockNumbers';\nimport { PickersArrowSwitcher } from '../internals/components/PickersArrowSwitcher';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { getClockPickerUtilityClass } from './clockPickerClasses';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    arrowSwitcher: ['arrowSwitcher']\n  };\n  return composeClasses(slots, getClockPickerUtilityClass, classes);\n};\n\nconst ClockPickerRoot = styled(PickerViewRoot, {\n  name: 'MuiClockPicker',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'flex',\n  flexDirection: 'column'\n});\nconst ClockPickerArrowSwitcher = styled(PickersArrowSwitcher, {\n  name: 'MuiClockPicker',\n  slot: 'ArrowSwitcher',\n  overridesResolver: (props, styles) => styles.arrowSwitcher\n})({\n  position: 'absolute',\n  right: 12,\n  top: 15\n});\n\nconst defaultGetClockLabelText = (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`;\n\nconst defaultGetMinutesClockNumberText = minutes => `${minutes} minutes`;\n\nconst defaultGetHoursClockNumberText = hours => `${hours} hours`;\n\nconst defaultGetSecondsClockNumberText = seconds => `${seconds} seconds`;\n\n/**\n *\n * API:\n *\n * - [ClockPicker API](https://mui.com/api/clock-picker/)\n */\nexport const ClockPicker = /*#__PURE__*/React.forwardRef(function ClockPicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiClockPicker'\n  });\n  const {\n    ampm = false,\n    ampmInClock = false,\n    autoFocus,\n    components,\n    componentsProps,\n    date,\n    disableIgnoringDatePartForTimeValidation = false,\n    getClockLabelText = defaultGetClockLabelText,\n    getHoursClockNumberText = defaultGetHoursClockNumberText,\n    getMinutesClockNumberText = defaultGetMinutesClockNumberText,\n    getSecondsClockNumberText = defaultGetSecondsClockNumberText,\n    leftArrowButtonText = 'open previous view',\n    maxTime,\n    minTime,\n    minutesStep = 1,\n    rightArrowButtonText = 'open next view',\n    shouldDisableTime,\n    showViewSwitcher,\n    onChange,\n    view,\n    views = ['hours', 'minutes'],\n    openTo,\n    onViewChange,\n    className\n  } = props;\n  const {\n    openView,\n    setOpenView,\n    nextView,\n    previousView,\n    handleChangeAndOpenNext\n  } = useViews({\n    view,\n    views,\n    openTo,\n    onViewChange,\n    onChange\n  });\n  const now = useNow();\n  const utils = useUtils();\n  const midnight = utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0);\n  const dateOrMidnight = date || midnight;\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(dateOrMidnight, ampm, handleChangeAndOpenNext);\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    if (date === null) {\n      return false;\n    }\n\n    const validateTimeValue = getRequestedTimePoint => {\n      const isAfterComparingFn = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n      return Boolean(minTime && isAfterComparingFn(minTime, getRequestedTimePoint('end')) || maxTime && isAfterComparingFn(getRequestedTimePoint('start'), maxTime) || shouldDisableTime && shouldDisableTime(rawValue, viewType));\n    };\n\n    switch (viewType) {\n      case 'hours':\n        {\n          const hoursWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          return validateTimeValue(when => pipe(currentDate => utils.setHours(currentDate, hoursWithMeridiem), dateWithHours => utils.setMinutes(dateWithHours, when === 'start' ? 0 : 59), dateWithMinutes => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59))(date));\n        }\n\n      case 'minutes':\n        return validateTimeValue(when => pipe(currentDate => utils.setMinutes(currentDate, rawValue), dateWithMinutes => utils.setSeconds(dateWithMinutes, when === 'start' ? 0 : 59))(date));\n\n      case 'seconds':\n        return validateTimeValue(() => utils.setSeconds(date, rawValue));\n\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, date, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, shouldDisableTime, utils]);\n  const selectedId = useId();\n  const viewProps = React.useMemo(() => {\n    switch (openView) {\n      case 'hours':\n        {\n          const handleHoursChange = (value, isFinish) => {\n            const valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);\n            handleChangeAndOpenNext(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);\n          };\n\n          return {\n            onChange: handleHoursChange,\n            value: utils.getHours(dateOrMidnight),\n            children: getHourNumbers({\n              date,\n              utils,\n              ampm,\n              onChange: handleHoursChange,\n              getClockNumberText: getHoursClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'hours'),\n              selectedId\n            })\n          };\n        }\n\n      case 'minutes':\n        {\n          const minutesValue = utils.getMinutes(dateOrMidnight);\n\n          const handleMinutesChange = (value, isFinish) => {\n            handleChangeAndOpenNext(utils.setMinutes(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: minutesValue,\n            onChange: handleMinutesChange,\n            children: getMinutesNumbers({\n              utils,\n              value: minutesValue,\n              onChange: handleMinutesChange,\n              getClockNumberText: getMinutesClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'minutes'),\n              selectedId\n            })\n          };\n        }\n\n      case 'seconds':\n        {\n          const secondsValue = utils.getSeconds(dateOrMidnight);\n\n          const handleSecondsChange = (value, isFinish) => {\n            handleChangeAndOpenNext(utils.setSeconds(dateOrMidnight, value), isFinish);\n          };\n\n          return {\n            value: secondsValue,\n            onChange: handleSecondsChange,\n            children: getMinutesNumbers({\n              utils,\n              value: secondsValue,\n              onChange: handleSecondsChange,\n              getClockNumberText: getSecondsClockNumberText,\n              isDisabled: value => isTimeDisabled(value, 'seconds'),\n              selectedId\n            })\n          };\n        }\n\n      default:\n        throw new Error('You must provide the type for ClockView');\n    }\n  }, [openView, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, handleChangeAndOpenNext, dateOrMidnight, isTimeDisabled, selectedId]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(ClockPickerRoot, {\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: [showViewSwitcher && /*#__PURE__*/_jsx(ClockPickerArrowSwitcher, {\n      className: classes.arrowSwitcher,\n      leftArrowButtonText: leftArrowButtonText,\n      rightArrowButtonText: rightArrowButtonText,\n      components: components,\n      componentsProps: componentsProps,\n      onLeftClick: () => setOpenView(previousView),\n      onRightClick: () => setOpenView(nextView),\n      isLeftDisabled: !previousView,\n      isRightDisabled: !nextView,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(Clock, _extends({\n      autoFocus: autoFocus,\n      date: date,\n      ampmInClock: ampmInClock,\n      type: openView,\n      ampm: ampm,\n      getClockLabelText: getClockLabelText,\n      minutesStep: minutesStep,\n      isTimeDisabled: isTimeDisabled,\n      meridiemMode: meridiemMode,\n      handleMeridiemChange: handleMeridiemChange,\n      selectedId: selectedId\n    }, viewProps))]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ClockPicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * Set to `true` if focus should be moved to clock picker.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Selected date @DateIOType.\n   */\n  date: PropTypes.any,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @param {ClockPickerView} view The current view rendered.\n   * @param {TDate | null} time The current time.\n   * @param {MuiPickersAdapter<TDate>} adapter The current date adapter.\n   * @returns {string} The clock label.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate | null,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) =>\n   *   `Select ${view}. ${\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\n   *   }`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for hours.\n   * @param {string} hours The hours to format.\n   * @returns {string} the formatted hours text.\n   * @default (hours: string) => `${hours} hours`\n   */\n  getHoursClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for minutes.\n   * @param {string} minutes The minutes to format.\n   * @returns {string} the formatted minutes text.\n   * @default (minutes: string) => `${minutes} minutes`\n   */\n  getMinutesClockNumberText: PropTypes.func,\n\n  /**\n   * Get clock number aria-text for seconds.\n   * @param {string} seconds The seconds to format.\n   * @returns {string} the formatted seconds text.\n   * @default (seconds: string) => `${seconds} seconds`\n   */\n  getSecondsClockNumberText: PropTypes.func,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @default 'open previous view'\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * Max time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  maxTime: PropTypes.any,\n\n  /**\n   * Min time acceptable time.\n   * For input validation date part of passed object will be ignored if `disableIgnoringDatePartForTimeValidation` not specified.\n   */\n  minTime: PropTypes.any,\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * On change callback @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired on view change.\n   * @param {ClockPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Initially open view.\n   * @default 'hours'\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Right arrow icon aria-label text.\n   * @default 'open next view'\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   * @param {number} timeValue The value to check.\n   * @param {ClockPickerView} clockType The clock type of the timeValue.\n   * @returns {boolean} Returns `true` if the time should be disabled\n   */\n  shouldDisableTime: PropTypes.func,\n  showViewSwitcher: PropTypes.bool,\n\n  /**\n   * Controlled open view.\n   */\n  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Views for calendar picker.\n   * @default ['hours', 'minutes']\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;"]},"metadata":{},"sourceType":"module"}