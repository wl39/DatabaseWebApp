{"ast":null,"code":"import { useValidation } from './useValidation';\nexport const validateDate = (utils, value, _ref) => {\n  let {\n    disablePast,\n    disableFuture,\n    minDate,\n    maxDate,\n    shouldDisableDate\n  } = _ref;\n  const now = utils.date();\n  const date = utils.date(value);\n\n  if (date === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(shouldDisableDate && shouldDisableDate(date)):\n      return 'shouldDisableDate';\n\n    case Boolean(disableFuture && utils.isAfterDay(date, now)):\n      return 'disableFuture';\n\n    case Boolean(disablePast && utils.isBeforeDay(date, now)):\n      return 'disablePast';\n\n    case Boolean(minDate && utils.isBeforeDay(date, minDate)):\n      return 'minDate';\n\n    case Boolean(maxDate && utils.isAfterDay(date, maxDate)):\n      return 'maxDate';\n\n    default:\n      return null;\n  }\n};\n\nconst isSameDateError = (a, b) => a === b;\n\nexport const useDateValidation = props => useValidation(props, validateDate, isSameDateError);","map":{"version":3,"sources":["/cs/home/wl39/Documents/CS3101/P2/node_modules/@mui/x-date-pickers/internals/hooks/validation/useDateValidation.js"],"names":["useValidation","validateDate","utils","value","disablePast","disableFuture","minDate","maxDate","shouldDisableDate","now","date","isValid","Boolean","isAfterDay","isBeforeDay","isSameDateError","a","b","useDateValidation","props"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,WAMtB;AAAA,MANqC;AACzCC,IAAAA,WADyC;AAEzCC,IAAAA,aAFyC;AAGzCC,IAAAA,OAHyC;AAIzCC,IAAAA,OAJyC;AAKzCC,IAAAA;AALyC,GAMrC;AACJ,QAAMC,GAAG,GAAGP,KAAK,CAACQ,IAAN,EAAZ;AACA,QAAMA,IAAI,GAAGR,KAAK,CAACQ,IAAN,CAAWP,KAAX,CAAb;;AAEA,MAAIO,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,UAAQ,IAAR;AACE,SAAK,CAACR,KAAK,CAACS,OAAN,CAAcR,KAAd,CAAN;AACE,aAAO,aAAP;;AAEF,SAAKS,OAAO,CAACJ,iBAAiB,IAAIA,iBAAiB,CAACE,IAAD,CAAvC,CAAZ;AACE,aAAO,mBAAP;;AAEF,SAAKE,OAAO,CAACP,aAAa,IAAIH,KAAK,CAACW,UAAN,CAAiBH,IAAjB,EAAuBD,GAAvB,CAAlB,CAAZ;AACE,aAAO,eAAP;;AAEF,SAAKG,OAAO,CAACR,WAAW,IAAIF,KAAK,CAACY,WAAN,CAAkBJ,IAAlB,EAAwBD,GAAxB,CAAhB,CAAZ;AACE,aAAO,aAAP;;AAEF,SAAKG,OAAO,CAACN,OAAO,IAAIJ,KAAK,CAACY,WAAN,CAAkBJ,IAAlB,EAAwBJ,OAAxB,CAAZ,CAAZ;AACE,aAAO,SAAP;;AAEF,SAAKM,OAAO,CAACL,OAAO,IAAIL,KAAK,CAACW,UAAN,CAAiBH,IAAjB,EAAuBH,OAAvB,CAAZ,CAAZ;AACE,aAAO,SAAP;;AAEF;AACE,aAAO,IAAP;AApBJ;AAsBD,CApCM;;AAsCP,MAAMQ,eAAe,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKC,CAAxC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,IAAInB,aAAa,CAACmB,KAAD,EAAQlB,YAAR,EAAsBc,eAAtB,CAAhD","sourcesContent":["import { useValidation } from './useValidation';\nexport const validateDate = (utils, value, {\n  disablePast,\n  disableFuture,\n  minDate,\n  maxDate,\n  shouldDisableDate\n}) => {\n  const now = utils.date();\n  const date = utils.date(value);\n\n  if (date === null) {\n    return null;\n  }\n\n  switch (true) {\n    case !utils.isValid(value):\n      return 'invalidDate';\n\n    case Boolean(shouldDisableDate && shouldDisableDate(date)):\n      return 'shouldDisableDate';\n\n    case Boolean(disableFuture && utils.isAfterDay(date, now)):\n      return 'disableFuture';\n\n    case Boolean(disablePast && utils.isBeforeDay(date, now)):\n      return 'disablePast';\n\n    case Boolean(minDate && utils.isBeforeDay(date, minDate)):\n      return 'minDate';\n\n    case Boolean(maxDate && utils.isAfterDay(date, maxDate)):\n      return 'maxDate';\n\n    default:\n      return null;\n  }\n};\n\nconst isSameDateError = (a, b) => a === b;\n\nexport const useDateValidation = props => useValidation(props, validateDate, isSameDateError);"]},"metadata":{},"sourceType":"module"}